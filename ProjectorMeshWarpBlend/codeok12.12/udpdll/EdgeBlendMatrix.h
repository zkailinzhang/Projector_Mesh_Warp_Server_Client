/** @class EdgeBlendMatrix
	@version 1.0 
	@date 2008-11-24
	@author Robert Malmstrom
*/

#ifndef EDGE_BLEND_MATRIX_H
#define EDGE_BLEND_MATRIX_H

#include "stdafx.h"
//#include "RenderDX.h"
#include "RenderMatrix.h"

/// This class is used to create a edge blend matrix.
/** This class is used to create a edge blend matrix that is
	rendered in the view. This class inherits from the class
	RenderMatrix so read the dokumentation in the RenderMatrix.h
	file to understand the in parameters in the EdgeBlendMatrix
	contructor. The edge blend matrix uses a texture with the
	size 1 * 256 pixels to render the edge blend with a gradient
	from black to 100% transparent. 
	
	
	The values in this edge blend
	texture is set with the function SetEdgeBlendAlpha. When a
	cell value in the second row is changed with the function
	SetCellValue it also sets the third column cell value so that
	it is in a straigth line from the first and second cell to a
	point outside of the view.
*/

class EdgeBlendMatrix : public RenderMatrix
{
private:
	static float m_sfMaxColorValue;

public:
	EdgeBlendMatrix(	const unsigned int iColumns, const unsigned int iRows,
						const unsigned int iColumnIterpolations, const unsigned int iRowIterpolations,
						const unsigned long ulHandle, int channel);
	~EdgeBlendMatrix( void );

	/** This function is called when the DirectX Device is lost. This can happen when
		the screen saver is started or when you press Ctrl-Alt-Del. It then release
		all the resources on the graphics card that this class has created such
		as verteices, index list and texture.
	*/
	void OnLostDevice( void );
	/** This function is called when this class is instanciated or when the
		DirectX Device is reset from a lost device. It then creates 
		all the resources on the graphics card that this class uses such
		as verteices, index list and texture.
	*/
	//void OnResetDevice( IDirect3DDevice9* pD3DDevice );
	/** This function is called by the WarpLogic class when the matrix shall
		be rendered to the back buffer on the graphics card.
	*/
	void Draw( void );

	/** This function is used to change a cell value in the edge blend matrix.
		The uiCellIndex in parameter is a index between 0 to 33 and represents
		the cells in the matrix. The index 0 is the cell in the upper left corner of
		the martix, 1 is the cell in the middle of the upper row and index 2 is
		the left cell of the next row a.s.o. 
		The third column cell value in each row
		in this matrix is generated by this function when the second cell value is set
		so that it is in a straigth line from the first and second cell to a point
		outside of the view.
	*/
	bool SetCellValue( const unsigned int uiCellIndex, const Cell& cell, const float fLevel );
	/** This function sets the gradient values in the edge blend texture used
		to make the edge blend matrix draw a gradient edge. The in parameter
		usaAplha is a array with short values that sets the aplha value of the
		edge blend matrix. The in parameter usNumOfValues tells how many shorts
		that is in the usaAplha array. The in parameter usFirstIndex tells the
		function which index to start in the usaAplha array. The in parameter
		usIndexStepSize tells how many pixles, between each value in the usaAplha
		array, that has to be generated by this function in a line between the
		values.
	*/
	void SetEdgeBlendAlpha( const unsigned short* usaAplha, const unsigned short usNumOfValues, 
		const unsigned short usFirstIndex, const unsigned short usIndexStepSize, vector<float> &vec_alpha);

private:
	//IDirect3DDevice9*	m_pD3DDevice;
	//IDirect3DTexture9*	m_pEdgeBlendTexture;
};

#endif